{"version":3,"sources":["dummy/tests/app.jshint.js","dummy/tests/components/powerbi-filter-pane.jshint.js","dummy/tests/components/powerbi-page-navigation.jshint.js","dummy/tests/controllers/scenario2.jshint.js","dummy/tests/controllers/scenario3.jshint.js","dummy/tests/controllers/scenario4.jshint.js","dummy/tests/controllers/scenario6.jshint.js","dummy/tests/ember-sinon-qunit/test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/json.jshint.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/register-select-helper.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/integration/components/powerbi-component-test.js","dummy/tests/integration/components/powerbi-component-test.jshint.js","dummy/tests/integration/components/powerbi-report-test.js","dummy/tests/integration/components/powerbi-report-test.jshint.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/index.jshint.js","dummy/tests/routes/scenario1.jshint.js","dummy/tests/routes/scenario3.jshint.js","dummy/tests/routes/scenario4.jshint.js","dummy/tests/routes/scenario5.jshint.js","dummy/tests/routes/scenario6.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/services/powerbi-test.js","dummy/tests/unit/services/powerbi-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/components/powerbi-filter-pane.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/powerbi-filter-pane.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/powerbi-filter-pane.js should pass jshint.');\n  });\n});","define('dummy/tests/components/powerbi-page-navigation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/powerbi-page-navigation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/powerbi-page-navigation.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/scenario2.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/scenario2.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/scenario2.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/scenario3.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/scenario3.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/scenario3.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/scenario4.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/scenario4.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/scenario4.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/scenario6.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/scenario6.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/scenario6.js should pass jshint.');\n  });\n});","define('dummy/tests/ember-sinon-qunit/test', ['exports', 'ember', 'sinon', 'qunit', 'ember-qunit'], function (exports, _ember, _sinon, _qunit, _emberQunit) {\n  exports['default'] = test;\n\n  _sinon['default'].expectation.fail = _sinon['default'].assert.fail = function (msg) {\n    _qunit['default'].ok(false, msg);\n  };\n\n  _sinon['default'].assert.pass = function (assertion) {\n    _qunit['default'].ok(true, assertion);\n  };\n\n  _sinon['default'].config = {\n    injectIntoThis: false,\n    injectInto: null,\n    properties: ['spy', 'stub', 'mock', 'sandbox'],\n    useFakeTimers: false,\n    useFakeServer: false\n  };\n\n  function test(testName, callback) {\n    function sinonWrapper() {\n      var context = this;\n      if (_ember['default'].isBlank(context)) {\n        context = {};\n      }\n      _sinon['default'].config.injectInto = context;\n\n      return _sinon['default'].test(callback).apply(context, arguments);\n    }\n\n    return (0, _emberQunit.test)(testName, sinonWrapper);\n  }\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/json.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/json.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/json.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/register-select-helper', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('select', function (app, selector) {\n      for (var _len = arguments.length, texts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        texts[_key - 2] = arguments[_key];\n      }\n\n      var $options = app.testHelpers.findWithAssert(selector + ' option');\n\n      $options.each(function () {\n        var _this = this;\n\n        var $option = _ember['default'].$(this);\n\n        _ember['default'].run(function () {\n          _this.selected = texts.some(function (text) {\n            return $option.is(':contains(\\'' + text + '\\')');\n          });\n          $option.trigger('change');\n        });\n      });\n\n      return app.testHelpers.wait();\n    });\n  };\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/powerbi-component-test', ['exports', 'ember-qunit', 'ember', 'sinon'], function (exports, _emberQunit, _ember, _sinon) {\n\n  var fakeComponent = { fakeComponent: true };\n  var embedStub = _sinon['default'].stub();\n  embedStub.returns(fakeComponent);\n  var powerbiStub = _ember['default'].Service.extend({\n    embed: embedStub,\n    reset: _sinon['default'].spy()\n  });\n\n  (0, _emberQunit.moduleForComponent)('powerbi-component', 'Integration | Component | powerbi component', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('service:powerbi', powerbiStub);\n      // Calling inject puts the service instance in the test's context,\n      // making it accessible as \"locationService\" within each test\n      this.inject.service('powerbi', { as: 'powerbiService' });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'powerbi-component', ['loc', [null, [1, 0], [1, 21]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.4',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'powerbi-component', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n\n  (0, _emberQunit.test)('calls the internal .embed when component is rendered and attributes are valid', function () {\n    var testData = {\n      type: 'report',\n      embedUrl: 'http://embed.powerbi.com',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('report', testData);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-component', [['get', 'report', ['loc', [null, [1, 20], [1, 26]]]]], [], ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'), this.$(), _sinon['default'].match.any);\n  });\n\n  (0, _emberQunit.test)('does not call the internal .embed if attributes are invalid, but calls them after they become valid', function (assert) {\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    var testData = {\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('report', testData);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-component', [['get', 'report', ['loc', [null, [1, 20], [1, 26]]]]], [], ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.get('powerbiService.embed').notCalled);\n\n    var validData = _ember['default'].$.extend({ type: 'report' }, testData);\n    this.set('report', validData);\n\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'), this.$(), _sinon['default'].match.any);\n  });\n\n  (0, _emberQunit.test)('calls internal .embed with jquery element of the component and the correct configuration type for reports', function () {\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    var testData = {\n      type: 'report',\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('report', testData);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-component', [['get', 'report', ['loc', [null, [1, 20], [1, 26]]]]], [], ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'), this.$(), testData);\n  });\n\n  (0, _emberQunit.test)('calls internal .reset with jquery element before it is destroyed', function () {\n    // Manual beforeEach\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    // Arrange\n    var testData = {\n      type: 'report',\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('report', testData);\n    this.set('showReport', true);\n\n    // Act\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.4',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 46\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'powerbi-component', [['get', 'report', ['loc', [null, [1, 38], [1, 44]]]]], [], ['loc', [null, [1, 18], [1, 46]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 53\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'showReport', ['loc', [null, [1, 6], [1, 16]]]]], [], 0, null, ['loc', [null, [1, 0], [1, 53]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'));\n\n    var component = this.$().find('.powerbi-frame');\n    this.set('showReport', false);\n\n    // Assert\n    _sinon['default'].assert.calledWithMatch(this.get('powerbiService.reset'), { 0: component[0] });\n  });\n\n  (0, _emberQunit.test)('calls internal .reset with jquery element when attributes become invalid', function () {\n    // Manual beforeEach\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    // Arrange\n    var testData = {\n      type: 'report',\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('report', testData);\n\n    // Act\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-component', [['get', 'report', ['loc', [null, [1, 20], [1, 26]]]]], [], ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'));\n\n    var component = this.$().find('.powerbi-frame');\n    this.set('report', null);\n\n    // Assert\n    _sinon['default'].assert.calledWithMatch(this.get('powerbiService.reset'), { 0: component[0] });\n  });\n\n  (0, _emberQunit.test)('does not call internal .reset when attributes are invalid unless component was already embedded', function () {\n    // Manual beforeEach\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    // Arrange\n    var testData = {\n      type: 'report',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('report', testData);\n\n    // Act\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-component', [['get', 'report', ['loc', [null, [1, 20], [1, 26]]]]], [], ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Assert\n    _sinon['default'].assert.notCalled(this.get('powerbiService.embed'));\n    _sinon['default'].assert.notCalled(this.get('powerbiService.reset'));\n  });\n\n  (0, _emberQunit.test)('this.component is set to null after calling reset', function (assert) {\n    // Manual beforeEach\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    // Arrange\n    var testData = {\n      type: 'report',\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('report', testData);\n\n    // Act\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-component', [['get', 'report', ['loc', [null, [1, 20], [1, 26]]]]], [], ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'));\n\n    this.set('report', null);\n\n    // Assert\n    assert.equal(this.get('component'), null);\n  });\n});","define('dummy/tests/integration/components/powerbi-component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/powerbi-component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/powerbi-component-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/powerbi-report-test', ['exports', 'ember-qunit', 'ember', 'sinon'], function (exports, _emberQunit, _ember, _sinon) {\n\n  var fakeComponent = { fakeComponent: true };\n  var embedStub = _sinon['default'].stub();\n  embedStub.returns(fakeComponent);\n  var powerbiStub = _ember['default'].Service.extend({\n    embed: embedStub,\n    reset: _sinon['default'].spy()\n  });\n\n  (0, _emberQunit.moduleForComponent)('powerbi-report', 'Integration | Component | powerbi report', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('service:powerbi', powerbiStub);\n      // Calling inject puts the service instance in the test's context,\n      // making it accessible as \"locationService\" within each test\n      this.inject.service('powerbi', { as: 'powerbiService' });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'powerbi-report', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.4',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'powerbi-report', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n\n  (0, _emberQunit.test)('calls the internal .embed when component is rendered and attributes are valid', function (assert) {\n    var testData = {\n      embedUrl: 'http://embed.powerbi.com',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('embedUrl', testData.embedUrl);\n    this.set('accessToken', testData.accessToken);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-report', [], ['embedUrl', ['subexpr', '@mut', [['get', 'embedUrl', ['loc', [null, [1, 26], [1, 34]]]]], [], []], 'accessToken', ['subexpr', '@mut', [['get', 'accessToken', ['loc', [null, [1, 47], [1, 58]]]]], [], []]], ['loc', [null, [1, 0], [1, 60]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.get('powerbiService.embed').called);\n  });\n\n  (0, _emberQunit.test)('does not call the internal .embed if attributes are invalid, but calls them after they become valid', function (assert) {\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    var testData = {\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('embedUrl', testData.embedUrl);\n    this.set('accessToken', null);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-report', [], ['embedUrl', ['subexpr', '@mut', [['get', 'embedUrl', ['loc', [null, [1, 26], [1, 34]]]]], [], []], 'accessToken', ['subexpr', '@mut', [['get', 'accessToken', ['loc', [null, [1, 47], [1, 58]]]]], [], []]], ['loc', [null, [1, 0], [1, 60]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.get('powerbiService.embed').notCalled);\n\n    this.set('accessToken', testData.accessToken);\n\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'), this.$(), _sinon['default'].match.any);\n  });\n\n  (0, _emberQunit.test)('calls internal .embed with jquery element of the component and the correct configuration type for reports', function () {\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    var testData = {\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('embedUrl', testData.embedUrl);\n    this.set('accessToken', testData.accessToken);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-report', [], ['embedUrl', ['subexpr', '@mut', [['get', 'embedUrl', ['loc', [null, [1, 26], [1, 34]]]]], [], []], 'accessToken', ['subexpr', '@mut', [['get', 'accessToken', ['loc', [null, [1, 47], [1, 58]]]]], [], []]], ['loc', [null, [1, 0], [1, 60]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var expectedData = {\n      type: 'report',\n      embedUrl: testData.embedUrl,\n      accessToken: testData.accessToken\n    };\n\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'), this.$(), _sinon['default'].match(expectedData));\n  });\n\n  (0, _emberQunit.test)('calls internal .reset with this.component', function () {\n    // Manual beforeEach\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    // Arrange\n    var testData = {\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('embedUrl', testData.embedUrl);\n    this.set('accessToken', testData.accessToken);\n    this.set('showReport', true);\n\n    // Act\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.4',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 78\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'powerbi-report', [], ['embedUrl', ['subexpr', '@mut', [['get', 'embedUrl', ['loc', [null, [1, 44], [1, 52]]]]], [], []], 'accessToken', ['subexpr', '@mut', [['get', 'accessToken', ['loc', [null, [1, 65], [1, 76]]]]], [], []]], ['loc', [null, [1, 18], [1, 78]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 85\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'showReport', ['loc', [null, [1, 6], [1, 16]]]]], [], 0, null, ['loc', [null, [1, 0], [1, 85]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'));\n\n    var component = this.$().find('.powerbi-frame');\n    this.set('showReport', false);\n\n    // Assert\n    _sinon['default'].assert.calledWithMatch(this.get('powerbiService.reset'), { 0: component[0] });\n  });\n\n  (0, _emberQunit.test)('calls internal .reset with jquery element when attributes become invalid', function () {\n    // Manual beforeEach\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    // Arrange\n    var testData = {\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('embedUrl', testData.embedUrl);\n    this.set('accessToken', testData.accessToken);\n\n    // Act\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-report', [], ['embedUrl', ['subexpr', '@mut', [['get', 'embedUrl', ['loc', [null, [1, 26], [1, 34]]]]], [], []], 'accessToken', ['subexpr', '@mut', [['get', 'accessToken', ['loc', [null, [1, 47], [1, 58]]]]], [], []]], ['loc', [null, [1, 0], [1, 60]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'));\n\n    var component = this.$().find('.powerbi-frame');\n    this.set('embedUrl', null);\n\n    // Assert\n    _sinon['default'].assert.calledWithMatch(this.get('powerbiService.reset'), { 0: component[0] });\n  });\n\n  (0, _emberQunit.test)('does not call internal .reset when attributes are invalid unless component was already embedded', function () {\n    // Manual beforeEach\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    // Arrange\n    var testData = {\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('embedUrl', null);\n    this.set('accessToken', testData.accessToken);\n\n    // Act\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-report', [], ['embedUrl', ['subexpr', '@mut', [['get', 'embedUrl', ['loc', [null, [1, 26], [1, 34]]]]], [], []], 'accessToken', ['subexpr', '@mut', [['get', 'accessToken', ['loc', [null, [1, 47], [1, 58]]]]], [], []]], ['loc', [null, [1, 0], [1, 60]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Assert\n    _sinon['default'].assert.notCalled(this.get('powerbiService.embed'));\n    _sinon['default'].assert.notCalled(this.get('powerbiService.reset'));\n  });\n\n  (0, _emberQunit.test)('this.component is set to null after calling reset', function (assert) {\n    // Manual beforeEach\n    this.get('powerbiService.embed').reset();\n    this.get('powerbiService.reset').reset();\n\n    // Arrange\n    var testData = {\n      embedUrl: 'http://embed.powerbi.com/appTokenReportEmbed',\n      accessToken: 'fakeToken1'\n    };\n\n    this.set('embedUrl', testData.embedUrl);\n    this.set('accessToken', testData.accessToken);\n\n    // Act\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.4',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'powerbi-report', [], ['embedUrl', ['subexpr', '@mut', [['get', 'embedUrl', ['loc', [null, [1, 26], [1, 34]]]]], [], []], 'accessToken', ['subexpr', '@mut', [['get', 'accessToken', ['loc', [null, [1, 47], [1, 58]]]]], [], []]], ['loc', [null, [1, 0], [1, 60]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.embed'));\n\n    this.set('accessToken', null);\n    _sinon['default'].assert.calledOnce(this.get('powerbiService.reset'));\n\n    // Assert\n    assert.equal(this.get('component'), null);\n  });\n});","define('dummy/tests/integration/components/powerbi-report-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/powerbi-report-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/powerbi-report-test.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/scenario1.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/scenario1.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/scenario1.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/scenario3.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/scenario3.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/scenario3.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/scenario4.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/scenario4.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/scenario4.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/scenario5.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/scenario5.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/scenario5.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/scenario6.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/scenario6.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/scenario6.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/powerbi-test', ['exports', 'ember-qunit', 'dummy/tests/ember-sinon-qunit/test'], function (exports, _emberQunit, _dummyTestsEmberSinonQunitTest) {\n\n  (0, _emberQunit.moduleFor)('service:powerbi', 'Unit | Service | powerbi', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _dummyTestsEmberSinonQunitTest['default'])('it exists', function (assert) {\n    var service = this.subject();\n\n    assert.ok(service);\n  });\n\n  (0, _dummyTestsEmberSinonQunitTest['default'])('calls to .embed call the core service .embed and return the result', function (assert) {\n    // Arrange\n    var testData = {\n      $element: $('<div></div>'),\n      config: {},\n      fakeComponent: {}\n    };\n\n    var service = this.subject();\n    var originalPowerbi = service.get('powerbi');\n    var embedStub = this.stub();\n    embedStub.returns(testData.fakeComponent);\n    var powerbiSpy = {\n      embed: embedStub\n    };\n    service.set('powerbi', powerbiSpy);\n\n    // Act\n    var result = service.embed(testData.$element, testData.config);\n\n    // Assert\n    assert.ok(powerbiSpy.embed.calledWithExactly(testData.$element.get(0), testData.config));\n    assert.equal(result, testData.fakeComponent);\n\n    // Cleanup\n    service.set('powerbi', originalPowerbi);\n  });\n\n  (0, _dummyTestsEmberSinonQunitTest['default'])('calls to .reset call the core service .reset', function (assert) {\n    // Arrange\n    var testData = {\n      $element: $('<div></div>')\n    };\n\n    var service = this.subject();\n    var originalPowerbi = service.get('powerbi');\n    var powerbiSpy = {\n      reset: this.spy()\n    };\n    service.set('powerbi', powerbiSpy);\n\n    // Act\n    service.reset(testData.$element);\n\n    // Assert\n    assert.ok(powerbiSpy.reset.calledWithExactly(testData.$element.get(0)));\n\n    // Cleanup\n    service.set('powerbi', originalPowerbi);\n  });\n});","define('dummy/tests/unit/services/powerbi-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/powerbi-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/powerbi-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvnnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}